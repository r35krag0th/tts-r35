----- Gloomhaven Attack Helper

--- The Attack helper is a simple little object to help
-- compute the final values for a monster's abilities
-- >>> Custom Token Image: https://cdn.r35.net/tts-modding/objects/rounded-squares/Gloomhaven-Attack-Helper-v2.png

ATTACK_HELPER_CUSTOM_TOKEN_IMAGE = "https://cdn.r35.net/tts-modding/objects/rounded-squares/Gloomhaven-Attack-Helper-v2.png"
ATTACK_HELPER_VERSION = 1

#include tts-r35/src/libr35/utils/colors
#include tts-r35/src/libr35/utils/strings

-- TODO: Figure out where to put a reset button

OUTPUT_BUTTON_WIDTH = 550
OUTPUT_BUTTON_FONT_SIZE = 100
OUTPUT_BUTTON_HEIGHT = 300
OUTPUT_BUTTON_Y_OFFSET_TOP = 0.05
OUTPUT_BUTTON_Y_OFFSET_BOTTOM = -0.1

COLORS = {
  move = hex_color_to_rgba("7cb07a"),
  attack = hex_color_to_rgba("eb593c"),
  range = hex_color_to_rgba("fcd554"),
  shield = hex_color_to_rgba("da8c5d"),
  retaliate = hex_color_to_rgba("73dadb")
}

COUNTERS = {
  bonus = {
    move = 0,
    attack = 0,
    range = 0,
    shield = 0,
    retaliate = 0,
    retaliaterange = 0,
  },
  base = {
    move = 0,
    attack = 0,
    range = 0,
    shield = 0,
    retaliate = 0,
    retaliaterange = 0,
  }
}

NAME = "No Name"

button_index_to_button = {}
button_grouped_by_scope_to_index = {
  bonus = {},
  base = {},
  name = nil,
}

--- Called when the object is being loaded by TTS
-- @param saved_data string
function onLoad(saved_data)
  if saved_data ~= nil and saved_data ~= "" then
    local deserialized = JSON.decode(saved_data)
    if deserialized.COUNTERS ~= nil and type(deserialized.COUNTERS) == "table" then
      local scopes = {"bonus", "base"}
      for _, scope_name in pairs(scopes) do
        if deserialized.COUNTERS[scope_name] ~= nil and type(deserialized.COUNTERS[scope_name]) == "table" then
          for k, v in pairs(deserialized.COUNTERS[scope_name]) do
            COUNTERS[scope_name][k] = v
          end
        end
      end
    end

    if deserialized.NAME ~= nil and deserialized.NAME ~= "" then
      NAME = deserialized.NAME
    end
  end

  create_all_buttons()

  for button_index, button in pairs(self.getButtons()) do
    button_index_to_button[button_index] = button

    -- break down the click function names that are "handle_{name}_{scope}_click"
    local click_function = button.click_function:gsub("handle_", ""):gsub("_click", "")
    local function_name_parts = split_by_underscore(click_function)

    if function_name_parts[2] == "base" or function_name_parts[2] == "bonus" then
      button_grouped_by_scope_to_index[function_name_parts[2]][function_name_parts[1]] = button_index
    elseif click_function == "name" then
      button_grouped_by_scope_to_index.name = button_index
    end
  end

  refresh_labels()

  set_object_name(NAME)
  self.setDescription("Backed by r35 CDN\n[b]Version:[/b] " .. ATTACK_HELPER_VERSION)
end

--- Save the object's current state
function save_current_state()
  local save_state_structure = {
    COUNTERS = COUNTERS,
    NAME = NAME,
  }
  self.script_state = JSON.encode(save_state_structure)
end

--- Set the object's name, or a sane default
function set_object_name(new_name)
  if new_name == nil or new_name == "" then
    new_name = "No Name"
  end

  NAME = new_name
  self.setName("GH Attack Helper - " .. NAME)

  self.editButton({
    index = button_grouped_by_scope_to_index.name - 1,
    label = new_name,
  })
end

--- Create a button set!
--
-- This will dynamically create the six buttons for top or bottom
-- the top vs bottom is determined by the `click_function_suffix`.
-- "bonus" or "base" are the two valid values
--
-- @param y_offset float Used to put the buttons on the top or bottom of the token
-- @param click_function_suffix fills in the suffix for handle_{thing}_{suffix}_click
function create_button_set(y_offset, click_function_suffix)
  click_function_suffix = click_function_suffix or "bonus"

  local common_button_params = {
    label = click_function_suffix,
    function_owner = self,
    position = {
      x = -1.40,
      y = y_offset,
      z = 0.75,
    },
    rotation = {
      x = 0,
      y = 0,
      z = 0,
    },
    height = OUTPUT_BUTTON_HEIGHT,
    width = OUTPUT_BUTTON_WIDTH,
    alignment = 3,
    font_size = OUTPUT_BUTTON_FONT_SIZE,
    font_color = { 0, 0, 0, 1 },
  }
  if click_function_suffix == "base" then
    common_button_params.rotation = { x = 180, y = 180, z = 0 }
  end

  common_button_params.click_function = string.format("handle_shield_%s_click", click_function_suffix)
  common_button_params.color = COLORS.shield
  common_button_params.font_color = COLOR_BLACK
  common_button_params.position.x = -1.40
  common_button_params.position.z = 0.75
  self.createButton(common_button_params)

  common_button_params.click_function = string.format("handle_move_%s_click", click_function_suffix)
  common_button_params.color = COLORS.move
  common_button_params.font_color = COLOR_BLACK
  common_button_params.position.x = -1.40
  common_button_params.position.z = -0.1
  self.createButton(common_button_params)

  common_button_params.click_function = string.format("handle_retaliate_%s_click", click_function_suffix)
  common_button_params.color = COLORS.retaliate
  common_button_params.font_color = COLOR_BLACK
  common_button_params.position.x = 0.2
  common_button_params.position.z = 0.75
  self.createButton(common_button_params)

  common_button_params.click_function = string.format("handle_attack_%s_click", click_function_suffix)
  common_button_params.color = COLORS.attack
  common_button_params.font_color = COLOR_BLACK
  common_button_params.position.x = 0.20
  common_button_params.position.z = -0.1
  self.createButton(common_button_params)

  common_button_params.click_function = string.format("handle_retaliaterange_%s_click", click_function_suffix)
  common_button_params.color = COLORS.retaliate
  common_button_params.font_color = COLOR_BLACK
  common_button_params.position.x = 1.7
  common_button_params.position.z = 0.75
  self.createButton(common_button_params)

  common_button_params.click_function = string.format("handle_range_%s_click", click_function_suffix)
  common_button_params.color = COLORS.range
  common_button_params.font_color = COLOR_BLACK
  common_button_params.position.x = 1.85
  common_button_params.position.z = -0.1
  self.createButton(common_button_params)
end

--- Shortcut function that creates all of the top buttons
-- @see create_button_set
function create_top_buttons()
  -- Create the "name" button
  self.createButton({
    label=NAME,
    click_function="handle_name_click",
    tooltip="",
    function_owner=self,
    position={0, OUTPUT_BUTTON_Y_OFFSET_TOP, -0.83},
    height=200,
    width=1500,
    alignment=3,
    scale={x=1.5, y=1.5, z=1.5},
    font_size=100,
    font_color=COLOR_WHITE,
    color=COLOR_BLACK,
  })

  -- Create the 6 interaction buttons
  create_button_set(OUTPUT_BUTTON_Y_OFFSET_TOP, "bonus")
end

--- Shortcut function that creates all of the bottom buttons
-- @see create_button_set
function create_bottom_buttons()
  self.createInput({
    input_function = "handle_name_input",
    function_owner = self,
    label          = "Give me a Name!",
    alignment      = 3,
    position       = {0, OUTPUT_BUTTON_Y_OFFSET_BOTTOM, -0.83},
    rotation       = {180, 180, 0},
    width          = 1500,
    height         = 200,
    font_size      = 100,
    color          = COLOR_BLACK,
    font_color     = COLOR_WHITE,
    value          = NAME,
  })

  create_button_set(OUTPUT_BUTTON_Y_OFFSET_BOTTOM, "base")
end

--- Shortcut that creates that top and bottom buttons
-- @see create_button_set
-- @see create_top_buttons
-- @see create_bottom_buttons
function create_all_buttons()
  create_top_buttons()
  create_bottom_buttons()
end

--- As named, this function does nothing
-- This is mostly used for buttons that don't have any real
-- interactive purpose.
--
-- @param obj Object The object the button belongs to
-- @param player string Player Color that clicked the button
-- @param right_clicked boolean True if the button was right-clicked
function do_nothing(obj, player, right_clicked) end

--- Handle clicking the move button on the top
--
-- @see change_counter_by
-- @param obj Object The object the button belongs to
-- @param player string Player Color that clicked the button
-- @param right_clicked boolean True if the button was right-clicked
function handle_move_bonus_click(obj, player, right_clicked) change_counter_by("bonus", "move", right_clicked) end

--- Handle clicking the attack button on the top
--
-- @see change_counter_by
-- @param obj Object The object the button belongs to
-- @param player string Player Color that clicked the button
-- @param right_clicked boolean True if the button was right-clicked
function handle_attack_bonus_click(obj, player, right_clicked) change_counter_by("bonus", "attack", right_clicked) end

--- Handle clicking the range button on the top
--
-- @see change_counter_by
-- @param obj Object The object the button belongs to
-- @param player string Player Color that clicked the button
-- @param right_clicked boolean True if the button was right-clicked
function handle_range_bonus_click(obj, player, right_clicked) change_counter_by("bonus", "range", right_clicked) end

--- Handle clicking the shield button on the top
--
-- @see change_counter_by
-- @param obj Object The object the button belongs to
-- @param player string Player Color that clicked the button
-- @param right_clicked boolean True if the button was right-clicked
function handle_shield_bonus_click(obj, player, right_clicked) change_counter_by("bonus", "shield", right_clicked) end

--- Handle clicking the retaliate button on the top
--
-- @see change_counter_by
-- @param obj Object The object the button belongs to
-- @param player string Player Color that clicked the button
-- @param right_clicked boolean True if the button was right-clicked
function handle_retaliate_bonus_click(obj, player, right_clicked) change_counter_by("bonus", "retaliate", right_clicked) end

--- Handle clicking the retaliate range button on the top-- @see change_counter_by
--
-- @see change_counter_by
-- @param obj Object The object the button belongs to
-- @param player string Player Color that clicked the button
-- @param right_clicked boolean True if the button was right-clicked
function handle_retaliaterange_bonus_click(obj, player, right_clicked) change_counter_by("bonus", "retaliaterange", right_clicked) end

--- Handle clicking the "name" button
--
-- @see change_counter_by
-- This is more specifically named so that we can
-- filter it out when we're doing mass changes
-- @param obj Object The object the button belongs to
-- @param player string Player Color that clicked the button
-- @param right_clicked boolean True if the button was right-clicked
function handle_name_click(obj, player, right_clicked) end

--- Handle editing the input box on the back
-- Note, this will only update once you stop typing and click away
-- @param obj object The object the input is attached to
-- @param player_color string The player color that is interacting with this input
-- @param input_value string The value of the input box
-- @param selected boolean If the input box is still being edite or not
function handle_name_input(obj, player_color, input_value, selected)
  if selected == true then
    return
  end

  set_object_name(input_value)
  save_current_state()
end

--- Handle clicking the move button on the bottom
-- @see change_counter_by
-- @param obj Object The object the button belongs to
-- @param player string Player Color that clicked the button
-- @param right_clicked boolean True if the button was right-clicked
function handle_move_base_click(obj, player, right_clicked) change_counter_by("base", "move", right_clicked) end

--- Handle clicking the attack button on the bottom
-- @see change_counter_by
-- @param obj Object The object the button belongs to
-- @param player string Player Color that clicked the button
-- @param right_clicked boolean True if the button was right-clicked
function handle_attack_base_click(obj, player, right_clicked) change_counter_by("base", "attack", right_clicked) end

--- Handle clicking the range button on the bottom
-- @see change_counter_by
-- @param obj Object The object the button belongs to
-- @param player string Player Color that clicked the button
-- @param right_clicked boolean True if the button was right-clicked
function handle_range_base_click(obj, player, right_clicked) change_counter_by("base", "range", right_clicked) end

--- Handle clicking the shield button on the bottom
-- @see change_counter_by
-- @param obj Object The object the button belongs to
-- @param player string Player Color that clicked the button
-- @param right_clicked boolean True if the button was right-clicked
function handle_shield_base_click(obj, player, right_clicked) change_counter_by("base", "shield", right_clicked) end

--- Handle clicking the retaliate button on the bottom
-- @see change_counter_by
-- @param obj Object The object the button belongs to
-- @param player string Player Color that clicked the button
-- @param right_clicked boolean True if the button was right-clicked
function handle_retaliate_base_click(obj, player, right_clicked) change_counter_by("base", "retaliate", right_clicked) end

--- Handle clicking the retaliaterange button on the bottom
-- @see change_counter_by
-- @param obj Object The object the button belongs to
-- @param player string Player Color that clicked the button
-- @param right_clicked boolean True if the button was right-clicked
function handle_retaliaterange_base_click(obj, player, right_clicked) change_counter_by("base", "retaliaterange", right_clicked) end

--- Core function that handles updating the counters
-- and also handles updating the saved state
-- @param which_group string
-- @param which_counter string
-- @param value integer
function change_counter_by(which_group, which_counter, value)
  if type(value) == "boolean" then
    if value == true then
      value = -1
    else
      value = 1
    end
  end

  COUNTERS[which_group][which_counter] = COUNTERS[which_group][which_counter] + value

  -- now we need to update the two buttons {base, bonus}
  local base_button_value = string.format("%d", COUNTERS.base[which_counter])
  local total_value = COUNTERS.base[which_counter] + COUNTERS.bonus[which_counter]

  local right_modifier = "+"
  if COUNTERS.bonus[which_counter] < 0 then
    right_modifier = ""
  end
  local bonus_button_value = string.format("%d (%db%s%d)", total_value, COUNTERS.base[which_counter], right_modifier, COUNTERS.bonus[which_counter])

  local base_button_index = button_grouped_by_scope_to_index.base[which_counter]
  local bonus_button_index = button_grouped_by_scope_to_index.bonus[which_counter]

  self.editButton({
    index = base_button_index - 1,
    label = base_button_value,
  })
  self.editButton({
    index = bonus_button_index - 1,
    label = bonus_button_value,
  })

  save_current_state()
end

--- Refresh all the labels with current values
-- This will also compute the "final total" values
function refresh_labels()
  for scope_name, scope_counters in pairs(COUNTERS) do
    for counter_name, _ in pairs(scope_counters) do
      change_counter_by(scope_name, counter_name, 0)
    end
  end
end
